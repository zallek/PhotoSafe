/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenRootTypes {
  Face: { // root type
    h: number; // Int!
    id: number; // Int!
    w: number; // Int!
    x: number; // Int!
    y: number; // Int!
  }
  Identity: { // root type
    id: number; // Int!
    name: string; // String!
  }
  Mutation: {};
  Photo: { // root type
    id: number; // Int!
    path: string; // String!
  }
  Query: {};
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
}

export interface NexusGenFieldTypes {
  Face: { // field return type
    h: number; // Int!
    id: number; // Int!
    identity: NexusGenRootTypes['Identity'] | null; // Identity
    photo: NexusGenRootTypes['Photo']; // Photo!
    w: number; // Int!
    x: number; // Int!
    y: number; // Int!
  }
  Identity: { // field return type
    faces: NexusGenRootTypes['Face'][]; // [Face!]!
    id: number; // Int!
    name: string; // String!
  }
  Mutation: { // field return type
    createFace: NexusGenRootTypes['Face']; // Face!
    createIdentity: NexusGenRootTypes['Identity']; // Identity!
    deleteFace: NexusGenRootTypes['Face']; // Face!
    deleteIdentity: NexusGenRootTypes['Identity']; // Identity!
    identifyFace: NexusGenRootTypes['Face']; // Face!
    scanPhotos: NexusGenRootTypes['Photo'][]; // [Photo!]!
  }
  Photo: { // field return type
    faces: NexusGenRootTypes['Face'][]; // [Face!]!
    id: number; // Int!
    path: string; // String!
  }
  Query: { // field return type
    identities: NexusGenRootTypes['Identity'][]; // [Identity!]!
    identity: NexusGenRootTypes['Identity']; // Identity!
    photo: NexusGenRootTypes['Photo']; // Photo!
    photos: NexusGenRootTypes['Photo'][]; // [Photo!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createFace: { // args
      h: number; // Int!
      photoId: number; // Int!
      w: number; // Int!
      x: number; // Int!
      y: number; // Int!
    }
    createIdentity: { // args
      faceId?: number | null; // Int
      name: string; // String!
    }
    deleteFace: { // args
      faceId: number; // Int!
    }
    deleteIdentity: { // args
      identityId: number; // Int!
    }
    identifyFace: { // args
      faceId: number; // Int!
      identityId: number; // Int!
    }
  }
  Query: {
    identity: { // args
      identityId: number; // Int!
    }
    photo: { // args
      photoId: number; // Int!
    }
    photos: { // args
      identityId?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Face" | "Identity" | "Mutation" | "Photo" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}